from telegram.ext import ApplicationBuilder, MessageHandler, filters, CallbackQueryHandler, CommandHandler

from gpt import *
from util import *

async def start(update, context):
    dialog.mode = "main"
    await send_photo(update, context, "main")
    text = load_message("main")
    await send_text(update, context, "*–¢—ã –Ω–∞–∂–∞–ª –Ω–∞ start\n*" + text)

    await show_main_menu(update, context, {
        "start":"–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞",
        "profile":"–≥–µ–Ω–µ—Ä–∞—Ü–∏—è Tinder-–ø—Ä–æ—Ñ–ª—è üòé",
        "opener": "—Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ ü•∞",
        "message": "–ø–µ—Ä–µ–ø–∏—Å–∫–∞ –æ—Ç –≤–∞—à–µ–≥–æ –∏–º–µ–Ω–∏ üòà",
        "date": "–ø–µ—Ä–µ–ø–∏—Å–∫–∞ —Å–æ –∑–≤–µ–∑–¥–∞–º–∏ üî•",
        "gpt": "–∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —á–∞—Ç—É GPT üß†"
    })

async def gpt(update, context):
    dialog.mode = "gpt"
    text = load_message("gpt")
    await send_photo(update, context, "gpt")
    await send_text(update, context, text)

async def gpt_dialog(update, context):
    text = update.message.text
    prompt = load_prompt("gpt")
    answer = await chatgpt.send_question(prompt,text)
    await send_text(update, context, answer)


async def date(update, context):
    dialog.mode = "date"
    text = load_message("date")
    await send_photo(update, context, "date")
    await send_text_buttons(update, context, text, {
        "dateGrande":"–ê—Ä–∏–∞–Ω–∞ –ì—Ä–∞–Ω–¥–µ",
        "dateRobbie": "–ú–∞—Ä–≥–æ –†–æ–±–±–∏",
        "dateZendaya": "–ó–µ–Ω–¥–µ—è",
        "dateGosling": "–†–∞–π–∞–Ω –ì–æ—Å–ª–∏–Ω–≥",
        "dateHardy": "–¢–æ–º –•–∞—Ä–¥–∏"
    })

async def date_dialog(update, context):
    text = update.message.text
    my_message = await send_text(update, context, "–î–µ–≤—É—à–∫–∞ –Ω–∞–±–∏—Ä–∞–µ—Ç —Ç–µ–∫—Å—Ç...")
    answer = await chatgpt.add_message(text)
    await my_message.edit_text(answer)

async def date_button(update, context):
    query = update.callback_query.data
    await update.callback_query.answer()

    await send_photo(update, context, query)
    await send_text(update, context, "–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä! –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥–µ–≤—É—à–∫—É –∏–ª–∏ –ø–∞—Ä–Ω—è –Ω–∞ —Å–≤–∏–¥–∞–Ω–∏–µ –∑–∞ 5 —Å–æ–æ–±—â–µ–Ω–∏–π ")

    prompt = load_prompt(query)
    chatgpt.set_prompt(prompt)


async def message(update, context):
    dialog.mode = "message"
    text = load_message("message")

    await send_photo(update, context, "message")
    await send_text_buttons(update, context, text, {
        "messageNext":"–°–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
        "messageDate":"–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –Ω–∞ —Å–≤–∏–¥–∞–Ω–∏–µ"
    })
    dialog.list.clear()

async def message_button(update, context):
    query = update.callback_query.data
    await update.callback_query.answer()

    prompt = load_prompt(query)
    user_chat_history = "\n\n".join(dialog.list)
    my_message = await send_text(update, context, "ChatGPT –¥—É–º–∞–µ—Ç –Ω–∞–¥ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–∞...")
    answer = await chatgpt.send_question(prompt, user_chat_history)
    await my_message.edit_text(answer)

async def message_dialog(update, context):
    text = update.message.text
    dialog.list.append(text)

async def profile(update, context):
    dialog.mode = "profile"
    text = load_message("profile")
    await send_photo(update, context, "profile")
    await send_text(update, context, text)

    dialog.user.clear()
    dialog.counter = 0
    await send_text(update, context, "–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?")

async def profile_dialog(update, context):
    text = update.message.text
    dialog.counter += 1

    if dialog.counter == 1:
        dialog.user["age"] = text
        await send_text(update, context, "–ö–µ–º —Ç—ã —Ä–∞–±–æ—Ç–∞–µ—à—å?")
    elif dialog.counter == 2:
        dialog.user["occupation"] = text
        await send_text(update, context, "–£ —Ç–µ–±—è –µ—Å—Ç—å —Ö–æ–±–±–∏?")
    elif dialog.counter == 3:
        dialog.user["hobby"] = text
        await send_text(update, context, "–ß—Ç–æ —Ç–µ–±–µ –ù–ï –Ω—Ä–∞–≤–∏—Ç—Å—è –≤ –ª—é–¥—è—Ö?")
    elif dialog.counter == 4:
        dialog.user["annoys"] = text
        await send_text(update, context, "–¶–µ–ª–∏ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞?")
    elif dialog.counter == 5:
        dialog.user["goals"] = text
        prompt = load_prompt("profile")
        user_info = dialog_user_info_to_str(dialog.user)

        my_message = await send_text(update, context, "ChatGPTüß† –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å...")
        answer = await chatgpt.send_question(prompt, user_info)
        await my_message.edit_text(answer)

async def opener(update, context):
    dialog.mode = "opener"


    text = load_message("opener")
    await send_photo(update, context, "opener")
    await send_text(update, context, text)

    dialog.user.clear()
    dialog.counter = 0
    await send_text(update, context, "–ò–º—è –¥–µ–≤—É—à–∫–∏?")

async def opener_dialog(update, context):
    text = update.message.text
    dialog.counter += 1

    if dialog.counter == 1:
        dialog.user["name"] = text
        await send_text(update, context, "–°–∫–æ–ª—å–∫–æ –µ–π –ª–µ—Ç?")
    elif dialog.counter == 2:
        dialog.user["age"] = text
        await send_text(update, context, "–û—Ü–µ–Ω–∏—Ç–µ –µ–µ –≤–Ω–µ—à–Ω–æ—Å—Ç—å: 1-10 –±–∞–ª–ª–æ–≤?")
    elif dialog.counter == 3:
        dialog.user["handsome"] = text
        await send_text(update, context, "–ö–µ–º –æ–Ω–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç?")
    elif dialog.counter == 4:
        dialog.user["occupation"] = text
        await send_text(update, context, "–¶–µ–ª—å –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞?")
    elif dialog.counter == 5:
        dialog.user["goals"] = text
        prompt = load_prompt("opener")
        user_info = dialog_user_info_to_str(dialog.user)

        answer = await chatgpt.send_question(prompt, user_info)
        await send_text(update, context, answer)

async def hello(update, context):
    if dialog.mode == "gpt":
        await gpt_dialog(update, context)
    if dialog.mode == "date":
        await date_dialog(update, context)
    if dialog.mode == "message":
        await message_dialog(update, context)
    if dialog.mode == "profile":
        await profile_dialog(update, context)
    if dialog.mode == "opener":
        await opener_dialog(update, context)
    else:
        await send_text(update, context,"*–ü—Ä–∏–≤–µ–¥ –ú–µ–¥–≤–µ–¥*")
        await send_text(update, context, "_–ö–∞–∫ —Ç–≤–æ—ë –Ω–∏—á–µ–≥–æ?_")
        await send_text(update, context, "–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏: " + update.message.text)

        await send_photo(update, context, "avatar_main")
        await send_text_buttons(update, context, "–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞–∫–µ—Ç—É?", {
            "start":"–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞–∫–µ—Ç—É",
            "stop":"–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–∫–µ—Ç—É"
        })

async def hello_button(update, context):
    query = update.callback_query.data
    if query == "start":
        await send_text(update, context,"*–†–∞–∫–µ—Ç–∞ –ø–æ–ª–µ—Ç–µ–ª–∞*")
    else:
        await send_text(update, context,"*–†–∞–∫–µ—Ç–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, –ª–µ—Ç–∏—Ç –æ–±—Ä–∞—Ç–Ω–æ*")

dialog = Dialog()
dialog.mode = None
dialog.list = []
dialog.counter = 0
dialog.user = {}

chatgpt = ChatGptService(token="gpt:EG44JHCgWRZcE28XEIsgJFkblB3TKFPdeHKs9DxUsueSBurd")

app = ApplicationBuilder().token("7442085622:AAEMZEDduTPxq00E-3HD1YXB1Y98dZw-EW0").build()
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("gpt", gpt))
app.add_handler(CommandHandler("date", date))
app.add_handler(CommandHandler("message", message))
app.add_handler(CommandHandler("profile", profile))
app.add_handler(CommandHandler("opener", opener))

app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, hello))

app.add_handler(CallbackQueryHandler(date_button, pattern="^date.*"))
app.add_handler(CallbackQueryHandler(message_button, pattern="^message.*"))
app.add_handler(CallbackQueryHandler(hello_button))
app.run_polling()
